#!/usr/bin/python
# -*- coding: utf-8 -*-
from urlparse import urlparse

import os
import requests
from multiprocessing.dummy import Pool as ThreadPool
import argparse
import urllib3
import utils
urllib3.disable_warnings()
def detecttomcatmanager(url):
	try:
		urlobject = urlparse(url)
		url = "http://" + urlobject.netloc + '/manager/html'
		r = requests.get(url, timeout=2, verify=False, allow_redirects=False)
		if r.status_code == 401:
			print "[+] tomcat manager found in {}".format(url)
			return 1
		else:
			return 0
	except:
		return 0


def detectweblogicconsole(url):
	try:
		urlobject = urlparse(url)
		url = "http://" + urlobject.netloc + '/console/login/LoginForm.jsp'
		# print url
		r = requests.get(url, timeout=2, verify=False, allow_redirects=False)
		if r.status_code == 200 and r'Oracle WebLogic Server' in r.text:
			print "[+] weblogic console found in {}".format(url)
			return 1
		else:
			return 0
	except:
		return 0


def truncatetomatch(url):
	urlobject = urlparse(url)
	if urlobject.scheme in ['http', 'https'] and urlobject.netloc:
		return True
	else:
		return False


def read_from_file(file):
	if os.path.exists(file):
		with open(file, "r") as f:
			url_list = []
			for line in f:
				line = ''.join(line.splitlines())
				url_list.append(line)
			return url_list
	else:
		print "[!] file doesn't exist"


if __name__ == "__main__":
	parser = argparse.ArgumentParser(description='test if web console exists')
	parser.add_argument('-s', '--single', dest='target', help="test single url")
	parser.add_argument('-f', '--file', dest='file', help='test a batch of url from file')
	parser.add_argument('-b', '--batch', dest='batch', default=False, action="store_true", help="obtain urls from a remote server")
	options = parser.parse_args()
	target = options.target
	batch = options.batch
	file = options.file
	if target and not file and not batch:
		if truncatetomatch(options.target):
			detecttomcatmanager(options.target)
			detectweblogicconsole(options.target)
		else:
			print "please enter a valid formed url"
	elif file and not batch and not target:
		ifallmatch = True
		url_list=read_from_file(options.file)
		for url in url_list:
			if not truncatetomatch(url):
				print "[!]URL in the file {} is malformed".format(url)
				ifallmatch = False
		if ifallmatch:
			pool = ThreadPool(10)
			pool.map(detecttomcatmanager, url_list)
			pool.map(detectweblogicconsole, url_list)
	elif not file and not target and batch:
		urllist = utils.get_url_list("http://192.168.17.89:8080/RDP/safeTeamUtil/safeTeamUtil!getAllUrls.do")
		if urllist:
			pool = ThreadPool(50)
			results1 = pool.map(detecttomcatmanager, urllist)
			results2 = pool.map(detectweblogicconsole, urllist)
			pool.close()
			pool.join()
			json_data1 = utils.assembly_data("030204", dict(zip(urllist,results1)))
			json_data2 = utils.assembly_data("030109",dict(zip(urllist,results2)))
			# print json_data2
	
			r = utils.post_data(json_data2, "http://192.168.17.89:8080/RDP/safeTeamUtil/safeTeamUtil!recordVulnerability.do")
			r1 = utils.post_data(json_data1, "http://192.168.17.89:8080/RDP/safeTeamUtil/safeTeamUtil!recordVulnerability.do")
			
			print r
			print r1
			
			
			

			

