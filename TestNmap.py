# -*- coding: utf-8 -*-
from libnmap.process import NmapProcess
from libnmap.parser import NmapParser, NmapParserException
import argparse
from time import sleep
import datetime
from subprocess import call
import subprocess
# start a new nmap scan on localhost with some specific options

def init_parameter_handler():
	parser = argparse.ArgumentParser(description='Nmap + searchsploit + CVE databases.')
	parser.add_argument('i', help="target ip address")
	parser.add_argument('-port', help="declare a port number otherwise all ports will be scanned", default='')
	return parser.parse_args()



def do_scan(targets, options):
	parsed = None
	nmap_proc = NmapProcess(targets, options)
	print("Starting scanning with Nmap ( http://nmap.org )")
	nmap_proc.run_background()
	while nmap_proc.is_running():
		print("Nmap Scan running: ETC: {0} DONE: {1}%".format(datetime.datetime.fromtimestamp(nmap_proc.etc).strftime('%Y-%m-%d %H:%M:%S'), nmap_proc.progress))
		sleep(5)
    	#print("#####################")
	
	if nmap_proc.rc != 0:
		print ("nmap scan failed: {0}".format(nmap_proc.stderr))
	#print (type(nmap_proc.stdout))

	try:
		parsed = NmapParser.parse(nmap_proc.stdout)
	except NmapParserException as e:
		print ("Exception raised while parsing scan {0}".format(e.msg))

	return parsed, nmap_proc.stdout
# print scan results from a nmap report
def print_scan(nmap_report):
	print("Starting Parse {0} ( http://nmap.org ) at {1}".format(nmap_report.version,nmap_report.started))
	for host in nmap_report.hosts:
		if len(host.hostnames):
			tmp_host = host.hostnames.pop()
		else:
			tmp_host = host.address
		print("Nmap scan report for {0} ({1})".format(tmp_host, host.address))
		print("Host is {0}.".format(host.status))
		print("  PORT    STATE        SERVICE")
		for serv in host.services:
			pserv = "{0:>5s}/{1:3s}  {2:12s}  {3}".format(
                    str(serv.port),
                    serv.protocol,
                    serv.state,
                    serv.service)
			if len(serv.banner):
				pserv += " ({0})".format(serv.banner)
			print(pserv)
		print(nmap_report.summary)
if __name__ == "__main__":
	args = init_parameter_handler()
	print args.i
	print args.port
	report,raw_xml = do_scan(args.i, "-sV -sT -A {0} -f --script firewall-bypass".format(args.port))
	

	if report:
		with open("{0}.xml"format(args.i),"w") as f:
			f.write(raw_xml)
		print_scan(report)
		print("##########using searchsploit to scan low-hanging fruits of vulnerabilities########")
		output = subprocess.check_output(['searchsploit', '--nmap', "{0}.xml".format(args.i)])
		if "libxml" in output:
			print "please install necessary util following message", output
		else:
			print output
	else:
		print("No results returned")
	
	



