#!/usr/bin/python
# -*- coding: utf-8 -*-
from urlparse import urlparse

import os
import requests
from multiprocessing.dummy import Pool as ThreadPool
import argparse
import urllib3
urllib3.disable_warnings()
def detecttomcatmanager(url):
    try:
        urlobject = urlparse(url)
        url = urlobject.scheme + "://" + urlobject.netloc + '/manager/html'
        r = requests.get(url, timeout=15, verify=False, allow_redirects=False)
        if r.status_code == 401:
            print "[+] tomcat manager found in {}".format(url)
    except:
        pass


def detectweblogicconsole(url):
    try:
        urlobject = urlparse(url)
        url = urlobject.scheme + "://" + urlobject.netloc + '/console/login/LoginForm.jsp'
        # print url
        r = requests.get(url, timeout=15, verify=False, allow_redirects=False)
        if r.status_code == 200:
            print "[+] weblogic console found in {}".format(url)
    except:
        pass


def truncatetomatch(url):
    urlobject = urlparse(url)
    if urlobject.scheme in ['http', 'https'] and urlobject.netloc:
        return True
    else:
        return False


def read_from_file(file):
    if os.path.exists(file):
        with open(file, "r") as f:
            url_list = []
            for line in f:
                line = ''.join(line.splitlines())
                url_list.append(line)
            return url_list
    else:
        print "[!] file doesn't exist"


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='test if web console exists')
    parser.add_argument('-s', '--single', dest='target', help="test single url")
    parser.add_argument('-b', '--batch', dest='file', help='test a batch of url')
    options = parser.parse_args()
    if options.target and options.file:
        print "please use only one option"
        exit(0)
    if options.target:
        if truncatetomatch(options.target):
            detecttomcatmanager(options.target)
            detectweblogicconsole(options.target)
        else:
            print "please enter a valid formed url"
    elif options.file:
        ifallmatch = True
        url_list=read_from_file(options.file)
        for url in url_list:
            if not truncatetomatch(url):
                print "[!]URL in the file {} is malformed".format(url)
                ifallmatch = False
        if ifallmatch:
            pool = ThreadPool(10)
            pool.map(detecttomcatmanager, url_list)
            pool.map(detectweblogicconsole, url_list)

